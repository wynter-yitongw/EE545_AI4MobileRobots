#!/usr/bin/env python
from __future__ import division
import matplotlib.pyplot as plt
import numpy as np
import rospy

from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped

from ee545 import utils
from ee545.collector import SynchronizedMessageCollector


def plot_particle_filter():
    """Visualize the estimated state from the particle filter.

    Estimated and ground truth states are collected from driving in simulation.
    """
    gt_topic = rospy.get_param("~gt_topic", "/car/car_pose")
    est_topic = "/car/particle_filter/inferred_pose"
    duration = rospy.get_param("~duration", 10.0)

    collector = SynchronizedMessageCollector(
        [gt_topic, est_topic], [PoseStamped, PoseStamped]
    )
    rospy.loginfo("Listening for estimated states for {}s".format(duration))
    msgs = collector.start(duration=duration)

    if len(msgs) < 3:
        rospy.logwarn(
            "Did not collect enough messages to visualize. Is the particle filter publishing?"
        )
        return

    # Convert synchronized PoseStamped messages to state vectors
    estimates, references = [
        [utils.pose_to_particle(m.pose) for m in ms] for ms in zip(*msgs)
    ]
    estimates = np.array(estimates)
    references = np.array(references)

    # Compute median errors
    position_errors, abs_angular_errors = utils.estimation_error(estimates, references)
    caption = "Median position error = {:.3f}, angular error = {:.3f}".format(
        np.median(position_errors), np.median(abs_angular_errors)
    )

    plt.xlabel("x")
    plt.ylabel("y")
    plt.plot(estimates[:, 0], estimates[:, 1], c="r", label="Estimated State")
    plt.plot(references[:, 0], references[:, 1], c="g", label="Ground Truth")
    plt.figtext(0.5, 0.9, caption, wrap=True, horizontalalignment="center", fontsize=12)
    plt.legend()
    plt.gca().set_aspect(aspect=1.0)
    plt.show()


if __name__ == "__main__":
    rospy.init_node("plot_particle_filter")
    while not rospy.is_shutdown():
        rospy.loginfo(
            "Initialize the particle filter from RViz (with 2D Pose Estimate), then drive in simulation."
        )
        rospy.wait_for_message("/initialpose", PoseWithCovarianceStamped)
        plot_particle_filter()
