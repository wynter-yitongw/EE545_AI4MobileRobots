#!/usr/bin/env python

"""Compare different strategies for computing the Euclidean norm."""

from timeit import default_timer as timer
import matplotlib.pyplot as plt
import numpy as np

from introduction.listener import norm_python, norm_numpy


def compare_timing(data):
    """Report execution time for different norm functions.

    - Python for loop implementation
    - efficient NumPy implementation
    - generic NumPy built-in implementation
    """

    t1_begin = timer()
    result_1 = norm_python(data)
    t1_end = timer()

    t2_begin = timer()
    result_2 = norm_numpy(data)
    t2_end = timer()

    t3_begin = timer()
    result_3 = np.linalg.norm(data, axis=1, ord=2)
    t3_end = timer()

    assert np.allclose(result_1, result_3)
    assert np.allclose(result_2, result_3)
    return t1_end - t1_begin, t2_end - t2_begin, t3_end - t3_begin


def compare_trials(k=100, num=100, dim=5):
    """Run K trials to test different norm functions.

    Args:
      k: Number of trials
      num: Number of vectors per trial
      dim: Vector dimension

    Returns:
      Execution time for different norm functions on each trial as a np.array
    """
    time_spent = np.zeros((k, 3))
    for i in range(k):
        data = np.random.random((num, dim))
        time_spent[i, :] = compare_timing(data)

    plt.bar(
        ["for-loop", "NumPy", "np.linalg.norm"],
        np.mean(time_spent, axis=0),
        yerr=np.std(time_spent, axis=0),
        capsize=5,
    )
    plt.ylabel("Execution Time (s)")
    plt.show()
    return time_spent


if __name__ == "__main__":
    compare_trials()
